import os
import telebot
from dotenv import load_dotenv
from datetime import datetime, timedelta
import openai

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TOKEN)
openai.api_key = OPENAI_API_KEY

user_access = {}

def has_access(user_id):
    now = datetime.now()
    if user_id in user_access:
        started = user_access[user_id]
        if now - started > timedelta(days=7):
            return False
        return True
    else:
        user_access[user_id] = now
        return True

def generate_promo_idea(business_description):
    prompt = (
        f"–û–ø–∏—à–∏ —Ü—ñ–ª—å–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é –¥–ª—è –±—ñ–∑–Ω–µ—Å—É: {business_description}.\n"
        f"–ó–≥–µ–Ω–µ—Ä—É–π —ñ–¥–µ—é –ø—Ä–æ—Å—É–≤–∞–Ω–Ω—è –≤ TikTok.\n"
        f"–ü—Ä–∏–¥—É–º–∞–π PDF-–≥–∞–π–¥ —è–∫ –ª—ñ–¥-–º–∞–≥–Ω—ñ—Ç + —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.\n"
        f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ."
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=800,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI."

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–¥–µ—ó –¥–ª—è –ø—Ä–æ—Å—É–≤–∞–Ω–Ω—è —Ç–≤–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É.\n"
        "–ù–∞–ø–∏—à–∏, —è–∫ –≤—ñ–Ω –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è —Ç–∞ —á–∏–º –∑–∞–π–º–∞—î—Ç—å—Å—è üòä"
    )

@bot.message_handler(commands=['–≥–∞–π–¥'])
def send_guide(message):
    try:
        with open("lead_magnet.pdf", "rb") as file:
            bot.send_document(message.chat.id, file)
    except Exception:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–∞–π–¥. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ñ–∞–π–ª lead_magnet.pdf —ñ—Å–Ω—É—î.")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_id = message.from_user.id

    if not has_access(user_id):
        bot.send_message(
            message.chat.id,
            "‚õîÔ∏è –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—Ä–∏–¥–±–∞–π –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ $9."
        )
        return

    business = message.text
    bot.send_message(message.chat.id, "üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –±—ñ–∑–Ω–µ—Å...")

    result = generate_promo_idea(business)
    bot.send_message(message.chat.id, result)

    bot.send_message(message.chat.id, "üìé –•–æ—á–µ—à –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π PDF-–≥–∞–π–¥? –ù–∞–ø–∏—à–∏ /–≥–∞–π–¥")

bot.polling()

        bot.send_message(message.chat.id, "‚õîÔ∏è –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—Ä–∏–¥–±–∞–π –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ $9.")
        return

    business = message.text
    niche = detect_niche(business)
    data = niche_data.get(niche, niche_data["default"])

    response = (
        f"‚úÖ –û–ø–∏—Å –±—ñ–∑–Ω–µ—Å—É –æ—Ç—Ä–∏–º–∞–Ω–æ.\n\n"
        f"üìå –¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è:\n{data['audience']}\n\n"
        f"üì¢ –Ü–¥–µ—è –¥–ª—è –ø—Ä–æ—Å—É–≤–∞–Ω–Ω—è:\n{data['idea']}\n\n"
        f"üí° –õ—ñ–¥-–º–∞–≥–Ω—ñ—Ç:\n{data['lead']}"
    )

    response += "\n\nüìé –•–æ—á–µ—à –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π PDF-–≥–∞–π–¥? –ù–∞–ø–∏—à–∏ /–≥–∞–π–¥"
    bot.send_message(message.chat.id, response)

bot.polling()

